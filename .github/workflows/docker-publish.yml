# 創建dockerfile ，官方文檔 https://docs.github.com/zh/actions/publishing-packages/publishing-docker-images
name: 創建docker image

# 當docker分支推送代碼時，自動生成docker image
on:
  push:
    branches: ['docker']
#支持手动执行 测试
  workflow_dispatch:

# 配置
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      #
    steps:
      - name: 拉代碼
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: 登陸docker倉庫
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置java版本
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: maven创建打包
        run: mvn -B package --file pom.xml

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: 配置命令
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: 創建並且push代碼到git package倉庫
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


      - name: 启动项目
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REMOTE_IP_ADDRESS }} # 服务器ip地址 ; 需要去仓库的 settings/secrets/actions 去创建
          username: ${{ secrets.REMOTE_USER_NAME }} # 服务器用户名称；需要去仓库的 settings/secrets/actions 去创建
          password: ${{ secrets.REMOTE_PASSWORD }} # 服务器密码；需要去仓库的 settings/secrets/actions 去创建
          port: ${{ secrets.REMOTE_PORT }} # 服务器端口，默认22；需要去仓库的 settings/secrets/actions 去创建
          script: |
            echo '开始执行命令'
            docker stop weixin_service
            docker rm weixin_service
            echo '停止/删除 服务'
            docker rmi ghcr.io/jiahangchun/weixin:main
            echo '删除本地镜像'
            cd ${{ secrets.REMOTE_FILE_TARGET }}/nas_tool
            pwd
            echo '定位到需要执行命令的工程地址'
            docker login -u jiahangchun -p ${{ secrets.GITHUB_TOKEN }} https://ghcr.io
            docker pull ghcr.io/jiahangchun/weixin:main
            echo '拉最新的镜像'
            echo '${{ secrets.REMOTE_PASSWORD }}' | sudo -S sh start.sh
            echo '启动项目'

      - name: 程序执行完成
        run: echo 'success'
